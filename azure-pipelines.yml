variables:
  color: '\033[0;33m'
  doTerraform: true
  doContainer: false
  appVersion: 'v0.0.3'
  azureServiceConnection: k21-devops

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Containers
  condition: eq(variables['doContainer'], true)
  jobs:
  - job: Containers
    displayName: Containers
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: k21-registry

    - task: Docker@2
      displayName: Docker Build and Push App
      inputs:
        repository: app
        Dockerfile: ./container/app/Dockerfile
        containerRegistry: k21-registry
        command: buildAndPush
        tags: |
          $(appVersion)

    - task: Docker@2
      displayName: Docker Build and Push nginx
      inputs:
        repository: web
        Dockerfile: ./container/app/Dockerfile
        containerRegistry: k21-registry
        command: buildAndPush
        tags: |
          $(appVersion)

    - task: Docker@2
      displayName: Logout
      inputs:
        command: logout
        containerRegistry: k21-registry


- stage: Terraform
  displayName: Terraform Infrastructure
  condition: eq(variables['doTerraform'], true)
  variables:
    doDestroy: false
    logLevel: ERROR
    terraformVersion: '1.10.5'
    workingDirectory: terraform

  jobs:
  - job: TerraformPlan
    displayName: Terraform
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: $(terraformVersion)

    - task: TerraformTaskV4@4
      name: terraformInit
      displayName: Initialize terraform
      env:
        TF_LOG: $(logLevel)
      inputs:
        provider: azurerm
        command: init
        workingDirectory: $(workingDirectory)
        backendServiceArm: $(azureServiceConnection)
        backendAzureRmStorageAccountName: k21devops
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: terraform.tfstate
        backendAzureRmResourceGroupName: k21

    - task: TerraformTaskV4@4
      name: terraformValidate
      displayName: Validate Terraform
      env:
        TF_LOG: $(logLevel)
      inputs:
        provider: azurerm
        command: validate
        workingDirectory: $(workingDirectory)

    - task: TerraformTaskV4@4
      name: terraformPlan
      displayName: Terraform Plan
      condition: eq(variables['doDestroy'], false)
      env:
        TF_LOG: $(logLevel)
      inputs:
        provider: azurerm
        command: plan
        commandOptions: '-out main.tfplan -var acr_url=$(ACR_URL) -var app_version=$(appVersion) -var subscription_id=$(AZURE_SUBSCRIPTION_ID) -var my_cidr=$(MY_CIDR)' # subscription_id required for local compatibility.
        environmentServiceNameAzureRM: $(azureServiceConnection)
        workingDirectory: $(workingDirectory)

    - task: TerraformTaskV4@4
      name: terraformPlanDestroy
      displayName: Terraform Plan for Destruction
      condition: eq(variables['doDestroy'], true)
      inputs:
        provider: azurerm
        command: plan
        commandOptions: '-destroy -out main.tfplan'
        environmentServiceNameAzureRM: $(azureServiceConnection)
        workingDirectory: $(workingDirectory)

    # Only runs if the 'terraformPlan' task has detected changes the in state.
    - task: TerraformTaskV4@4
      name: terraformApply
      displayName: Terraform Apply
      condition: and(succeeded(), eq(variables['terraformPlan.changesPresent'], 'true'), eq(variables['doDestroy'], false))
      env:
        TF_LOG: $(logLevel)
      inputs:
        provider: azurerm
        command: apply
        commandOptions: main.tfplan
        environmentServiceNameAzureRM: $(azureServiceConnection)
        workingDirectory: $(workingDirectory)

    - task: TerraformTaskV4@4
      name: terraformDestroy
      displayName: Terraform Destroy
      condition: and(succeeded(), eq(variables['doDestroy'], true))
      env:
        TF_LOG: $(logLevel)
      inputs:
        provider: azurerm
        command: apply
        commandOptions: main.tfplan
        environmentServiceNameAzureRM: $(azureServiceConnection)
        workingDirectory: $(workingDirectory)

